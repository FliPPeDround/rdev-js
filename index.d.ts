/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum Button {
  Left = 0,
  Right = 1,
  Middle = 2
}
export const enum Key {
  Alt = 0,
  AltGr = 1,
  Backspace = 2,
  CapsLock = 3,
  ControlLeft = 4,
  ControlRight = 5,
  Delete = 6,
  DownArrow = 7,
  End = 8,
  Escape = 9,
  F1 = 10,
  F10 = 11,
  F11 = 12,
  F12 = 13,
  F2 = 14,
  F3 = 15,
  F4 = 16,
  F5 = 17,
  F6 = 18,
  F7 = 19,
  F8 = 20,
  F9 = 21,
  Home = 22,
  LeftArrow = 23,
  MetaLeft = 24,
  MetaRight = 25,
  PageDown = 26,
  PageUp = 27,
  Return = 28,
  RightArrow = 29,
  ShiftLeft = 30,
  ShiftRight = 31,
  Space = 32,
  Tab = 33,
  UpArrow = 34,
  PrintScreen = 35,
  ScrollLock = 36,
  Pause = 37,
  NumLock = 38,
  BackQuote = 39,
  Num1 = 40,
  Num2 = 41,
  Num3 = 42,
  Num4 = 43,
  Num5 = 44,
  Num6 = 45,
  Num7 = 46,
  Num8 = 47,
  Num9 = 48,
  Num0 = 49,
  Minus = 50,
  Equal = 51,
  KeyQ = 52,
  KeyW = 53,
  KeyE = 54,
  KeyR = 55,
  KeyT = 56,
  KeyY = 57,
  KeyU = 58,
  KeyI = 59,
  KeyO = 60,
  KeyP = 61,
  LeftBracket = 62,
  RightBracket = 63,
  KeyA = 64,
  KeyS = 65,
  KeyD = 66,
  KeyF = 67,
  KeyG = 68,
  KeyH = 69,
  KeyJ = 70,
  KeyK = 71,
  KeyL = 72,
  SemiColon = 73,
  Quote = 74,
  BackSlash = 75,
  IntlBackslash = 76,
  KeyZ = 77,
  KeyX = 78,
  KeyC = 79,
  KeyV = 80,
  KeyB = 81,
  KeyN = 82,
  KeyM = 83,
  Comma = 84,
  Dot = 85,
  Slash = 86,
  Insert = 87,
  KpReturn = 88,
  KpMinus = 89,
  KpPlus = 90,
  KpMultiply = 91,
  KpDivide = 92,
  Kp0 = 93,
  Kp1 = 94,
  Kp2 = 95,
  Kp3 = 96,
  Kp4 = 97,
  Kp5 = 98,
  Kp6 = 99,
  Kp7 = 100,
  Kp8 = 101,
  Kp9 = 102,
  KpDelete = 103,
  Function = 104
}
/**
 * Returns the size in pixels of the main screen.
 * This is useful to use with x, y from MouseMove Event.
 *
 * ### Example
 * ```javascript
 * import { displaySize } = from'@rdev-js/core';
 *
 * const [width, height] = displaySize();
 * ```
 *
 * @returns {[width:number, height:number]} The size in pixels of the main screen.
 */
export function displaySize(): [width:number, height:number]
/**
 *  Move the mouse cursor to the specified x and y coordinates.
 *
 * ### Example
 * ```javascript
 * import { mouseMove } from '@rdev-js/core';
 *
 * mouseMove(100, 100);
 * ```
 *
 * @param {number} x The x coordinate of the mouse.
 * @param {number} y The y coordinate of the mouse.
 */
export function mouseMove(x: number, y: number): void
/**
 * simulate an individual mouse button press event.
 *
 * ### Example
 * ```javascript
 * import { buttonPress, Button } from '@rdev-js/core';
 *
 * buttonPress(Button.Left);
 * ```
 *
 * @param {Button} button The button to press.
 */
export function buttonPress(button: Button): void
/**
 * simulate an individual mouse button release event.
 *
 * ### Example
 * ```javascript
 * import { buttonRelease, Button } from '@rdev-js/core';
 *
 * buttonRelease(Button.Left);
 * ```
 *
 * @param {Button} button The button to release.
 */
export function buttonRelease(button: Button): void
/**
 * Simulate a scroll wheel event.
 *
 * ### Example
 * ```javascript
 * import { wheel } from '@rdev-js/core';
 *
 * wheel(0, 10);
 * ```
 *
 * @param {number} deltaX represents horizontal scroll. Positive values correspond to scrolling right and negative values correspond to scrolling left.
 * @param {number} deltaY represents vertical scroll. Positive values correspond to scrolling down and negative values correspond to scrolling up.
 */
export function wheel(deltaX: number, deltaY: number): void
/**
 * Simulate a key press event.
 *
 * ### Example
 * ```javascript
 * import { keyPress, Key } from '@rdev-js/core';
 *
 * keyPress(Key.KeyA);
 * ```
 *
 * @param {Key} key The key to press.
 */
export function keyPress(key: Key): void
/**
 * Simulate a key release event.
 *
 * ### Example
 * ```javascript
 * import { keyRelease, Key } from '@rdev-js/core';
 *
 * keyRelease(Key.KeyA);
 * ```
 *
 * @param {Key} key The key to release.
 */
export function keyRelease(key: Key): void
/**
 * Listening to global events.
 * Caveat: On MacOS, you require the listen loop needs to be the primary app (no fork before) and need to have accessibility settings enabled.
 *
 * ### Example
 * ```javascript
 * import { listen } from '@rdev-js/core';
 *
 * listen((event) => {
 *     console.log(event);
 * });
 * ```
 *
 * @param {callback} callback The callback function to be called when an event occurs.
 */
export function listen(
callback: (
event: {
time: number,
type: {
direction: 'KeyPress' | 'KeyRelease'
key: keyof typeof Key
} | {
direction: 'ButtonPress' | 'ButtonRelease'
key: keyof typeof Button
} | {
direction: 'MouseMove'
x: number,
y: number
} | {
direction: 'Wheel'
deltaX: number,
deltaY: number
},
name?: string
}
) => void
): void
